1. linked list
- 다음에 처리할 데이터의 주소를 저장하고 있는 자료구조 (연속되어 있지 않음)
- 텍스트 에디터에서 많이 쓰이는 자료구조


2. 성질
- n번째 있는 임의의 원소를 확인/변경 -> O(n)
- 임의의 위치에 원소 추가하거나 제거 -> O(1)
- hit ratio 매우 낮음


3. 종류
- simply linked list (data, link)
	- 단일 방향으로의 링크로 구성됨
- doubly linked list (data, llink, rlink)
	- 양쪽 방향으로의 링크로 구성됨 (트리에서 많이 사용)
- circular linked list 
	- last node의 link가 first node를 가리킴


4. 배열 vs linked list
- 배열은 k번째 원소의 접근이 상수 시간이지만, linked list는 선형 시간이다.
- 임의의 위치에 원소를 추가하거나 제거하기 위해서 배열은 선형 시간, linked list는 상수 시간이다. (특정 원소를 넣을 주소값만 알고 있으면 link 필드값만 조정하면 될테니)
- 배열은 메모리에 저장될 때 연이어서 저장되나, linked list는 각각의 node들이 다 떨어져 있다 (불연속)


5. 연결 리스트 구현
- 구조체를 선언 후에 동적할당으로 node를 만드는 것은 시간이 너무 오래 걸리니, STL에 있는 list를 사용한다. list는 기본적으로 doubly linked list이다.
- 연결리스트를 배열로 관리할 수 있다.
	- data 배열 : 데이터 배열
	- pre 배열 : 이전 원소의 인덱스를 담는 배열
	- next 배열 : 다음 원소의 인덱스를 담는 배열
	- 정수 unused = 1 : 새로운 원소가 들어갈 수 있는 인덱스, 원소가 추가되면 1씩 증가 
	- 만약 pre나 next의 값이 -1이면 해당 원소의 이전, 다음 원소가 존재하지 않는단 것
	- 0번지는 값이 들어가지 않고 시작점만 나타낼 것 (dummy node)
	

6. 기능 구현
- traverse (연결리스트의 모든 원소 출력)
- insert (특정 인덱스의 다음 위치에 데이터 삽입)
- erase (특정 인덱스의 node 삭제)
