바킹독의 실전 알고리즘 OT~0x02
: orientation ~ 기초 코드 작성 요령
2024. 06. 23.

-----------

1. 코딩테스트에 대한 정보 
- 문제, 입력 예시, 출력 예시, 시간제한, 메모리제한
- 테스트케이스(TC)에 위배되지 않으면 정답임 (테스트케이스가 틀리거나, 테스트케이스가 누락되는 경우도 당연히 있음)
- 어떤 TC에서 틀렸다는 지 알려주지 않음 	
	- 코드업에서는 알려줌
	- 프로그래머스는 어떤 테스트케이스에서 틀렸는지 알려줌 
	- 백준은 %로 짐작이 가능
	- TC는 가능하면 30개 이상으로 할 것 (다음 자작문제 만들때 참고하기)
- 자기반례 들기 (TC 넣어서 반례 찾기)
- iostream, string, map, set, stack, vector, functional, algorithm -> <bits/stdc++.h>로 한꺼번에 선언 (gcc에서만 가능 / 삼성에선 한꺼번에 선언이 안되니 전자를 전부 작성할 것)


2. complexity
- time complexity (big-O)
	- 시간 제한과 반복문의 중첩 여부 및 순회, recursive call는 정비례하다
	- n의 차수가 제일 중요 (계수나 상수는 여기서 trivial)
	- 최악과 최선의 경우를 나눈다 (그 중에서 최악이 최종적인 시간복잡도)
	- binary search의 시간복잡도는 log_2_n
	- 보통의 시간 제한은 0.5초, 1초, 2초, 5초 정도 (백준 기준)
	- 가능하면 브루트포스 알고리즘을 제외한 경우 n^3의 반복문은 하지 말 것

- space complexity
	- 메모리를 얼마냐 쓰냐
	- 배열, vector, ... 


* 자료형 시작하기 전 복습
- int, long : 4byte (32bit) : -2^31 ~ 2^31-1
- short : 2byte (16bit) : -2^15 ~ 2^15-1
- long long : 8byte (64bit) : -2^63 ~ 2^63-1
- char : 1byte  (8bit) : -2^7 ~ 2^7-1
- float : 4byte (32bit) : -2^31 ~ 2^31-1 (보정계수 생략)
- double : 8byte (64bit) : -2^63 ~ 2^63-1 (보정계수 생략)
- unsigned : 0~양수 (MSB가 부호 비트가 아니게 됨)
	
	
3. 정수 자료형
- int의 범위를 넘어간다 -> long long 사용한다 (typedef로 ll로 정의해서 사용하면 편함)
- int의 범위를 넘어가는 값을 출력하면 음수가 나옴 (오버플로우로 MSB가 1이 되었기 때문)
- unsigned long long의 범위를 넘어선다 -> string을 이용하여 저장할 것


4. 실수 자료형
- 정규화 후 exponent, mantissa(fraction), sign
- bias에 따라서 표현하는 방법은 다르다
- 실수의 성질
	- 실수의 저장과 연산 과정은 오차가 생긴다 (무한소수를 저장할 때는 mantissa에 오차가 생기기 때문에) -> 따라서 float이 아닌 double을 가급적이면 이용할 것 
		- 출력 부분에서 절대/상대오차라는 말이 나온다 -> 실수로 해결해야 할 것
	- long long값을 double에 저장하지 말 것 (오차 발생할 수도 있음)
	- 실수 비교 시 등호를 사용하지 말 것 (오차)
	

5. 함수 인자
- call by value : int, double, float, long long, short, char 등과 같은 값을 parameter로 넘겨줄 때 복사되어서 넘겨줌
- call by reference : 배열의 주소나 포인터를 넘겨주면 그 값이 바뀜
- 구조체의 경우에도 값이 다 복사됨 (call by value)
- swap할 때는 포인터형 변수를 통해서 바꿀 것 (함수) -> 참조자를 통해서 해결해도 됨 (&)


6. vector
- vector : 가변배열, 일종의 해쉬(딕셔너리) 역할을 수행할 수 있음
- vector<자료형> 이름(칸 수)
- STL 또한 call by value이기 때문에 원본에 영향을 주지 않음
- vector는 배열과 다르게 원본으로부터 복사본을 실어서 보내기 때문에 복사하는 것도 영향 주어서 시간복잡도에 계산됨 -> 참조자를 이용하여서 시간복잡도 줄이기


7. 표준 입출력
- 문자열은 std::string을 쓰자 
- std::cin : 표준 입력 (using namespace std로 std 줄일 수 있음)
- 공백이 있는 입력을 받을 때 (공백이 있으면 다 잘라버리니깐)
	- getline : getline(std::cin, string변수명)을 사용하기
- std::cout : 표준 출력
- cin/cout은 시간초과가 날 수도 있으니 아래와 같은 코드를 main함수 앞에 작성한다 (python에서의 std.stdin.readline()와 비슷한 맥락)
	- ios::sync_with_stdio(0) : C와 C++의 스트림 동기화를 끊기 (따라서 이 명령 후에는 반드시 cin/cout만 사용해야 함)
	- std::cin.tie(0) : 버퍼 해결
- endl 쓰지말기 (개행문자를 쓸 것)
